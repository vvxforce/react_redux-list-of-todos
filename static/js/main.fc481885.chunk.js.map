{"version":3,"sources":["TodoItem.js","TodoList.js","App.js","store.js","index.js"],"names":["connect","state","todos","dispatch","setTodos","newTodos","type","handleDelete","id","_ref","todo","react_default","a","createElement","title","completed","user","name","onClick","selectedSort","setSelectedSort","sortTableBy","sortType","sortedTodos","Object","toConsumableArray","sort","b","localeCompare","toString","reverse","className","map","src_TodoItem","key","getTodosFromServer","response","regenerator_default","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","getUsersFromServer","_context2","isLoading","buttonStatus","setIsLoading","status","setButtonStatus","_ref2","_ref3","users","preparedTodos","_context3","Promise","all","slicedToArray","objectSpread2","find","userId","src_TodoList","store","createStore","action","filter","ReactDOM","render","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.fc481885.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst TodoItem = ({ todo, handleDelete }) => {\n\n  return (\n    <tr>\n      <th>{todo.id}</th>\n      <th>{todo.title}</th>\n      <th>{todo.completed ? '✅' : '❌'}</th>\n      <th>{todo.user.name}</th>\n      <td>\n        <button\n          type=\"button\"\n          onClick={() => handleDelete(todo.id)}\n        >\n          <span>&#128465;</span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n\nconst getData = state => ({\n  todos: state.todos,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n  handleDelete: id => dispatch({\n    type: 'DELETE_TODO',\n    id,\n  }),\n});\n\n\nTodoItem.propTypes = {\n  handleDelete: PropTypes.func.isRequired,\n  todo: PropTypes.shape({\n    id: PropTypes.number,\n    title: PropTypes.string,\n    user: PropTypes.object,\n    completed: PropTypes.bool,\n  }).isRequired,\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodos: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(TodoItem);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({ todos, setTodos, selectedSort, setSelectedSort }) => {\n  const sortTableBy = (sortType) => {\n    let sortedTodos = [];\n\n    switch (sortType) {\n      case 'id':\n        sortedTodos = [...todos].sort((a, b) => a.id - b.id);\n        break;\n      case 'title':\n        sortedTodos = [...todos].sort((a, b) => a.title.localeCompare(b.title));\n        break;\n      case 'user':\n        sortedTodos = [...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name));\n        break;\n      case 'completed':\n        sortedTodos = [...todos]\n          .sort((a, b) => b.completed.toString().localeCompare(\n            a.completed.toString()\n          ));\n        break;\n      default:\n    }\n\n    selectedSort === sortType\n      ? setTodos([...todos].reverse())\n      : setTodos(sortedTodos);\n    setSelectedSort(sortType);\n  };\n\n  return (\n    <div>\n      <table>\n        <thead>\n          <tr>\n            <th\n              className=\"title\"\n              onClick={() => sortTableBy('id')}\n            >\n              Sort by Id\n            </th>\n            <th\n              className=\"title\"\n              onClick={() => sortTableBy('title')}\n            >\n              Sort by Title\n            </th>\n            <th\n              className=\"title\"\n              onClick={() => sortTableBy('completed')}\n            >\n              Sort if is completed\n            </th>\n            <th\n              className=\"title\"\n              onClick={() => sortTableBy('user')}\n            >\n              Sort by Name\n            </th>\n            <th className=\"title\">Delete</th>\n          </tr>\n        </thead>\n        <tbody>\n          {todos.map(todo => (\n\n            <TodoItem todo={todo} key={todo.id} />\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setTodos: PropTypes.func.isRequired,\n  selectedSort: PropTypes.string.isRequired,\n  setSelectedSort: PropTypes.func.isRequired,\n};\n\nconst getData = state => ({\n  todos: state.todos,\n  selectedSort: state.selectedSort,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n  setSelectedSort: type => dispatch({\n    type: 'SET_SORT_TYPE',\n    selectedSort: type,\n  }),\n});\n\nexport default connect(getData, getMethods)(TodoList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport TodoList from './TodoList';\n\nconst todosURL = 'https://jsonplaceholder.typicode.com/todos';\nconst usersURL = 'https://jsonplaceholder.typicode.com/users';\n\nconst getTodosFromServer = async() => {\n  const response = await fetch(todosURL);\n\n  return response.json();\n};\n\nconst getUsersFromServer = async() => {\n  const response = await fetch(usersURL);\n\n  return response.json();\n};\n\nfunction App({\n  setTodos, isLoading, setIsLoading, buttonStatus, setButtonStatus,\n}) {\n  const handleLoading = async() => {\n    setIsLoading(true);\n\n    const [todos, users] = await Promise.all(\n      [getTodosFromServer(), getUsersFromServer()]\n    );\n\n    setIsLoading(false);\n    setButtonStatus(false);\n\n    const preparedTodos = todos.map(todo => ({\n      ...todo,\n      user: users.find(user => todo.userId === user.id),\n    }));\n\n    setTodos(preparedTodos);\n\n    return preparedTodos;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <h2 className=\"start-page\">Loading...</h2>\n      </div>\n    );\n  }\n\n  return buttonStatus\n    ? (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={handleLoading}\n        >\n          Load\n        </button>\n      </div>\n    ) : (\n      <div className=\"App\">\n        <h1>List of Todos</h1>\n        <TodoList />\n      </div>\n    );\n}\n\nconst getData = state => ({\n  isLoading: state.isLoading,\n  buttonStatus: state.buttonStatus,\n});\n\nconst getMethods = dispatch => ({\n  setTodos: newTodos => dispatch({\n    type: 'SET_TODOS',\n    todos: newTodos,\n  }),\n  setIsLoading: status => dispatch({\n    type: 'SET_LOADING',\n    isLoading: status,\n  }),\n  setButtonStatus: status => dispatch({\n    type: 'SET_BUTTON',\n    buttonStatus: status,\n  }),\n});\n\nApp.propTypes = {\n  setTodos: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  setIsLoading: PropTypes.func.isRequired,\n  buttonStatus: PropTypes.bool.isRequired,\n  setButtonStatus: PropTypes.func.isRequired,\n};\n\nexport default connect(getData, getMethods)(App);\n","import { createStore } from 'redux';\n\nexport const actionTypes = {\n  SET_TODOS: 'setTodos',\n  DELETE_TODO: 'handleDelete',\n};\n\nconst rootReduser = (state, action) => {\n  switch (action.type) {\n    case 'SET_TODOS':\n      return {\n        ...state,\n        todos: action.todos,\n      };\n    case 'SET_LOADING':\n      return {\n        ...state,\n        isLoading: action.isLoading,\n      };\n    case 'SET_BUTTON':\n      return {\n        ...state,\n        buttonStatus: action.buttonStatus,\n      };\n    case 'SET_SORT_TYPE':\n      return {\n        ...state,\n        selectedSort: action.selectedSort,\n      };\n    case 'DELETE_TODO':\n      return {\n        ...state,\n        todos: state.todos.filter(todo => todo.id !== action.id),\n      };\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  todos: [],\n  isLoading: false,\n  buttonStatus: true,\n  selectedSort: 'id',\n};\n\nconst store = createStore(rootReduser, initialState);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}